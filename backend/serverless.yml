org: donshrout
app: capstone-things-app
service: capstone-things-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  tracing:
    lambda: true
    apiGateway: true
  environment:
    AWS_KEY_ID: akiaq5vxjmu6zf4usbvb
    UNIQUE_STAGE_ID: ${self:provider.environment.AWS_KEY_ID}-${self:provider.stage}
    THINGS_TABLE: Thing-${self:provider.stage}
    THINGS_CREATED_AT_INDEX: CreatedAtIndex
    PICTURE_TABLE: Picture-${self:provider.stage}
    IMAGES_S3_BUCKET: things-images-${self:provider.environment.UNIQUE_STAGE_ID}
    SIGNED_URL_EXPIRATION: 300
  logs:
    # Enable API Gateway logs
    restApi: true
  iamRoleStatements:
    - Effect: Allow
      Resource: "*"
      Action:
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments

functions:
  RS256Auth:
    handler: src/lambda/authorizer/auth0Authorizer.handler
  CreateThing:
    handler: src/lambda/api/things/createThing.handler
    events:
      - http:
          method: post
          path: things
          cors: true
          authorizer:
            name: RS256Auth
          request:
            schemas:
              application/json: ${file(requestSchemas/create-thing.json)}
    iamRoleStatements:
      - Effect: Allow
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.THINGS_TABLE}
        Action:
          - dynamodb:PutItem
      - Effect: Allow
        Resource: "*"              
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
  RetrieveThingById:
    handler: src/lambda/api/things/retrieveThingById.handler
    events:
      - http:
          method: get
          path: things/{id}
          cors: true
          authorizer:
            name: RS256Auth
    iamRoleStatements:
      - Effect: Allow
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
        Action:
          - s3:GetObject
      - Effect: Allow
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.THINGS_TABLE}
        Action:
          - dynamodb:Query
      - Effect: Allow
        Resource: "*"              
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
  RetrieveThings:
    handler: src/lambda/api/things/retrieveThings.handler
    events:
      - http:
          method: get
          path: things
          cors: true
          authorizer:
            name: RS256Auth
    iamRoleStatements:
      - Effect: Allow
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
        Action:
          - s3:GetObject
      - Effect: Allow
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.THINGS_TABLE}
        Action:
          - dynamodb:Query
      - Effect: Allow
        Resource: "*"              
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
  UpdateThing:
    handler: src/lambda/api/things/updateThing.handler
    events:
      - http:
          method: put
          path: things
          cors: true
          authorizer:
            name: RS256Auth
          request:
            schemas:
              application/json: ${file(requestSchemas/update-thing.json)}
    iamRoleStatements:
      - Effect: Allow
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.THINGS_TABLE}
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
      - Effect: Allow
        Resource: "*"              
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
  DeleteThing:
    handler: src/lambda/api/things/deleteThing.handler
    events:
      - http:
          method: delete
          path: things/{id}
          cors: true
          authorizer:
            name: RS256Auth
    iamRoleStatements:
      - Effect: Allow
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.THINGS_TABLE}
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
      - Effect: Allow
        Resource: "*"              
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
  CreatePicture:
    handler: src/lambda/api/pictures/createPicture.handler
    events:
      - http:
          method: post
          path: pictures
          cors: true
          authorizer:
            name: RS256Auth
          request:
            schemas:
              application/json: ${file(requestSchemas/create-picture.json)}
    iamRoleStatements:
      - Effect: Allow
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
        Action:
          - s3:PutObject
      - Effect: Allow
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PICTURE_TABLE}
        Action:
          - dynamodb:PutItem
      - Effect: Allow
        Resource: "*"              
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
  RetrievePicture:
    handler: src/lambda/api/pictures/retrievePicture.handler
    events:
      - http:
          method: get
          path: pictures/{id}
          cors: true
          authorizer:
            name: RS256Auth
    iamRoleStatements:
      - Effect: Allow
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
        Action:
          - s3:GetObject
      - Effect: Allow
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PICTURE_TABLE}
        Action:
          - dynamodb:Query
      - Effect: Allow
        Resource: "*"              
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
  RetrievePicturesByThingId:
    handler: src/lambda/api/pictures/retrievePicturesByThingId.handler
    events:
      - http:
          method: get
          path: pictures
          cors: true
          authorizer:
            name: RS256Auth
    iamRoleStatements:
      - Effect: Allow
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
        Action:
          - s3:GetObject
      - Effect: Allow
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PICTURE_TABLE}
        Action:
          - dynamodb:Query
      - Effect: Allow
        Resource: "*"              
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
  UpdatePicture:
    handler: src/lambda/api/pictures/updatePicture.handler
    events:
      - http:
          method: put
          path: picture
          cors: true
          authorizer:
            name: RS256Auth
          request:
            schemas:
              application/json: ${file(requestSchemas/update-picture.json)}
    iamRoleStatements:
      - Effect: Allow
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
        Action:
          - s3:PutObject
      - Effect: Allow
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PICTURE_TABLE}
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
      - Effect: Allow
        Resource: "*"              
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
  DeletePicture:
    handler: src/lambda/api/pictures/deletePicture.handler
    events:
      - http:
          method: delete
          path: pictures/{id}
          cors: true
          authorizer:
            name: RS256Auth
    iamRoleStatements:
      - Effect: Allow
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
        Action:
          - s3:DeleteObject
          - s3:DeleteObjects
      - Effect: Allow
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PICTURE_TABLE}
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
      - Effect: Allow
        Resource: "*"              
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
  DeletePicturesByThingId:
    handler: src/lambda/api/pictures/deletePicturesByThingId.handler
    events:
      - http:
          method: delete
          path: pictures
          cors: true
          authorizer:
            name: RS256Auth
    iamRoleStatements:
      - Effect: Allow
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
        Action:
          - s3:DeleteObject
          - s3:DeleteObjects
      - Effect: Allow
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PICTURE_TABLE}
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
      - Effect: Allow
        Resource: "*"              
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    ThingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.THINGS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
    PictureTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PICTURE_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: thingId
            AttributeType: S
        KeySchema:
          - AttributeName: thingId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - POST
                - GET
                - PUT
                - DELETE
                - HEAD
              MaxAge: 3000
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:*'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
